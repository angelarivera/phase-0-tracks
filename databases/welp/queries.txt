You've joined two tables before. How do you join three?

	sqlite> SELECT users.first_name, businesses.name, reviews.comment FROM users
	   JOIN businesses ON users.id = businesses.id
	   JOIN reviews ON users.id = reviews.user_id
	   ;
		Bradford|Sushi World|GREAT FOOD!
		Angela|Lotus Yoga|it was okay. just kidding.

There are some repetitive columns if we choose to view all fields. Choose instead to just view the user's names, the business name, the star rating, and the comment.

	sqlite> SELECT users.first_name, businesses.name, reviews.stars, reviews.comment FROM users
  		JOIN businesses ON users.id = businesses.id
  		JOIN reviews ON users.id = reviews.user_id
		;
		Bradford|Sushi World|5|GREAT FOOD!
		Angela|Lotus Yoga|4|it was okay. just kidding.


How do you view the data of all three tables for just one particular business? 

	sqlite> SELECT * FROM users, businesses, reviews WHERE businesses.name="Lotus Yoga";
		1|Bradford|Pitt|2|Lotus Yoga|1|5|GREAT FOOD!|1|1
		1|Bradford|Pitt|2|Lotus Yoga|2|4|it was okay. just kidding.|2|2
		2|Angela|Jolie|2|Lotus Yoga|1|5|GREAT FOOD!|1|1
		2|Angela|Jolie|2|Lotus Yoga|2|4|it was okay. just kidding.|2|2
		3|Denzel|George|2|Lotus Yoga|1|5|GREAT FOOD!|1|1
		3|Denzel|George|2|Lotus Yoga|2|4|it was okay. just kidding.|2|2


* This is what our schema looks like

sqlite> .schema        
CREATE TABLE businesses (
id INTEGER PRIMARY KEY,
name VARCHAR(255)
);

CREATE TABLE users (
id INTEGER PRIMARY KEY,
first_name VARCHAR(255),
last_name VARCHAR(255)
);

CREATE TABLE reviews (
id INTEGER PRIMARY KEY,
stars INT,
comment VARCHAR(255),
business_id INT,
user_id INT,
FOREIGN KEY (business_id) REFERENCES businesses(id),
FOREIGN KEY (user_id) REFERENCES users(id)
);


* This is what our tables are populated withs

sqlite> SELECT * FROM users;
1|Bradford|Pitt
2|Angela|Jolie
3|Denzel|George

sqlite> SELECT * FROM businesses;
1|Sushi World
2|Lotus Yoga
3|The Beagle Nightclub

sqlite> SELECT * FROM reviews;
1|5|GREAT FOOD!|1|1
2|4|it was okay. just kidding.|2|2



